/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package avro.entity;  
@SuppressWarnings("all")
/** a pair of strings */
@org.apache.avro.specific.AvroGenerated
public class StringPairAliase extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StringPairAliase\",\"namespace\":\"ch04.entity\",\"doc\":\"a pair of strings\",\"fields\":[{\"name\":\"first\",\"type\":\"string\",\"aliases\":[\"left\"]},{\"name\":\"second\",\"type\":\"string\",\"aliases\":[\"right\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence first;
  @Deprecated public java.lang.CharSequence second;

  /**
   * Default constructor.
   */
  public StringPairAliase() {}

  /**
   * All-args constructor.
   */
  public StringPairAliase(java.lang.CharSequence first, java.lang.CharSequence second) {
    this.first = first;
    this.second = second;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return first;
    case 1: return second;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: first = (java.lang.CharSequence)value$; break;
    case 1: second = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'first' field.
   */
  public java.lang.CharSequence getFirst() {
    return first;
  }

  /**
   * Sets the value of the 'first' field.
   * @param value the value to set.
   */
  public void setFirst(java.lang.CharSequence value) {
    this.first = value;
  }

  /**
   * Gets the value of the 'second' field.
   */
  public java.lang.CharSequence getSecond() {
    return second;
  }

  /**
   * Sets the value of the 'second' field.
   * @param value the value to set.
   */
  public void setSecond(java.lang.CharSequence value) {
    this.second = value;
  }

  /** Creates a new StringPairAliase RecordBuilder */
  public static avro.entity.StringPairAliase.Builder newBuilder() {
    return new avro.entity.StringPairAliase.Builder();
  }
  
  /** Creates a new StringPairAliase RecordBuilder by copying an existing Builder */
  public static avro.entity.StringPairAliase.Builder newBuilder(avro.entity.StringPairAliase.Builder other) {
    return new avro.entity.StringPairAliase.Builder(other);
  }
  
  /** Creates a new StringPairAliase RecordBuilder by copying an existing StringPairAliase instance */
  public static avro.entity.StringPairAliase.Builder newBuilder(avro.entity.StringPairAliase other) {
    return new avro.entity.StringPairAliase.Builder(other);
  }
  
  /**
   * RecordBuilder for StringPairAliase instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StringPairAliase>
    implements org.apache.avro.data.RecordBuilder<StringPairAliase> {

    private java.lang.CharSequence first;
    private java.lang.CharSequence second;

    /** Creates a new Builder */
    private Builder() {
      super(avro.entity.StringPairAliase.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(avro.entity.StringPairAliase.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing StringPairAliase instance */
    private Builder(avro.entity.StringPairAliase other) {
            super(avro.entity.StringPairAliase.SCHEMA$);
      if (isValidValue(fields()[0], other.first)) {
        this.first = data().deepCopy(fields()[0].schema(), other.first);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.second)) {
        this.second = data().deepCopy(fields()[1].schema(), other.second);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'first' field */
    public java.lang.CharSequence getFirst() {
      return first;
    }
    
    /** Sets the value of the 'first' field */
    public avro.entity.StringPairAliase.Builder setFirst(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.first = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'first' field has been set */
    public boolean hasFirst() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'first' field */
    public avro.entity.StringPairAliase.Builder clearFirst() {
      first = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'second' field */
    public java.lang.CharSequence getSecond() {
      return second;
    }
    
    /** Sets the value of the 'second' field */
    public avro.entity.StringPairAliase.Builder setSecond(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.second = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'second' field has been set */
    public boolean hasSecond() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'second' field */
    public avro.entity.StringPairAliase.Builder clearSecond() {
      second = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public StringPairAliase build() {
      try {
        StringPairAliase record = new StringPairAliase();
        record.first = fieldSetFlags()[0] ? this.first : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.second = fieldSetFlags()[1] ? this.second : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
